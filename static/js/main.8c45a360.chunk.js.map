{"version":3,"sources":["redux/dialogs-reducer.ts","components/Users/Users.module.css","assets/image/image.png","assets/image/preloader.gif","api/api.ts","components/Navbar/Navbar.module.css","utils/objects-helper.ts","redux/users-reducer.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Navbar/Navbar.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Settings/Settings.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/common/Preloader/Preloader.tsx","components/common/FormsControls/TextArea.module.css","components/common/FormsControls/TextArea.tsx","components/common/Paginator/Paginator.module.css","utils/validators/validators.ts","components/Header/Header.module.css","redux/profile-reducer.ts","hoc/withAuthRedirect.tsx"],"names":["initialState","dialogs","id","name","messages","message","newMessage","AddMessageActionCreator","type","dialogReducer","state","action","module","exports","instance","axios","create","withCredentials","baseURL","headers","usersApi","setUsers","currentPage","pageSize","get","then","response","data","setFollow","userId","post","setUnFollow","delete","profileApi","getProfile","getStatus","updateStatus","status","put","authApi","getAuth","login","email","password","rememberMe","logout","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","totalUserCount","isFetching","followingInProgress","followSuccess","unFollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","filter","isAuth","setUserData","payload","getUserData","getState","authReducer","initialized","appReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogPage","usersPage","auth","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","window","Navbar","className","s","nav","item","to","Music","News","Settings","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","onClick","p","cn","selectedPage","pageNumber","key","e","User","user","follow","unFollow","src","photos","small","userPhoto","alt","disabled","some","Users","getUser","getPageSize","getTotalUserCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","props","getUsers","this","Preloader","React","Component","compose","withAuthRedirect","connect","bind","page","totalCount","Header","header","loginBlock","HeaderContainer","res","LoginReduxForm","reduxForm","handleSubmit","error","onSubmit","Field","placeholder","component","Input","validate","required","formSummaryError","length","stopSubmit","_error","formData","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","Suspense","fallback","promise","Promise","all","ReactDOM","document","getElementById","preloader","FormControl","input","meta","child","hasError","touched","formControl","children","TextArea","restProps","value","maxLengthCreator","maxLength","posts","likesCount","newPostText","profile","addPost","postMessage","setStatus","getUserProfile","getStateType","mapStateToPropsForRedirect"],"mappings":"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","file":"static/js/main.8c45a360.chunk.js","sourcesContent":["type ActionsTypes = ReturnType<typeof AddMessageActionCreator>\r\n    | ReturnType<typeof UpdateNewMessageActionCreator>\r\n\r\n\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    newMessage: string\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessagesType = {\r\n    id: number\r\n    message: string\r\n\r\n}\r\n\r\n\r\nlet initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Artem'},\r\n        {id: 3, name: 'Roman'},\r\n        {id: 4, name: 'Vadim'},\r\n        {id: 5, name: 'Vladimir'},\r\n        {id: 6, name: 'Maria'}\r\n    ],\r\n    messages: [\r\n        {id: 0, message: \"Hi.\"},\r\n        {id: 1, message: \"I'am fine\"},\r\n        {id: 2, message: \"How are you?\"}],\r\n    newMessage: \"\",\r\n}\r\n\r\n\r\nconst dialogReducer = (state: DialogsPageType = initialState, action: ActionsTypes): DialogsPageType => {\r\n\r\n    switch (action.type) {\r\n        case 'ADD-MESSAGE':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 3, message: action.message}]\r\n            }\r\n\r\n        case 'UPDATE-NEW-MESSAGE':\r\n            return {\r\n                ...state,\r\n                newMessage: action.newMessage\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const AddMessageActionCreator = (message: string) => {\r\n    return {\r\n        type: 'ADD-MESSAGE',\r\n        message: message\r\n    } as const\r\n}\r\n\r\nexport const UpdateNewMessageActionCreator = (newMessage: string) => {\r\n    return {\r\n        type: 'UPDATE-NEW-MESSAGE',\r\n        newMessage: newMessage\r\n    } as const\r\n}\r\n\r\n\r\nexport default dialogReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__2Tihg\"};","module.exports = __webpack_public_path__ + \"static/media/image.4e4422c6.png\";","module.exports = __webpack_public_path__ + \"static/media/preloader.1714aebd.gif\";","import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"369a3457-d3e2-4331-b490-319ddee29442\"\r\n    }\r\n})\r\n\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport type LoginParamsType={\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean | false\r\n    captcha?: string\r\n}\r\n\r\n\r\n\r\nexport const usersApi = {\r\n    setUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    setFollow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    setUnFollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n}\r\n\r\n\r\nexport const profileApi = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    updateStatus(status: string){\r\n        return instance.put(`profile/status`, {status})\r\n            .then(response =>{\r\n                return response.data\r\n            }\r\n        )\r\n    }\r\n\r\n}\r\nexport const authApi = {\r\n    getAuth() {\r\n        return instance.get(`auth/me`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    login(email: string, password: string,rememberMe: boolean= false ){\r\n        return instance.post('auth/login',{email,password,rememberMe})\r\n    },\r\n    logout(){\r\n        return instance.delete('auth/login')\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__320r_\",\"item\":\"Navbar_item__3ZbLW\",\"activeLink\":\"Navbar_activeLink__2Napf\"};","export const updateObjectInArray = (items: any, itemId: number, objPropName: any, newObjProps: any) => {\r\n\r\n   return items.map((u: { [x: string]: number }) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u\r\n    })\r\n\r\n}\r\n\r\n\r\n\r\n","import {usersApi} from \"../api/api\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {updateObjectInArray} from \"../utils/objects-helper\";\r\n\r\ntype ActionsTypes =\r\n    | ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unFollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUserCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\n\r\nexport type UsersPageType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUserCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport type UsersType = {\r\n    id: number\r\n    photos: PhotosType\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n}\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\ntype LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\n\r\nlet initialState: UsersPageType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUserCount: 10,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n\r\n}\r\n\r\nexport const usersReducer = (state: UsersPageType = initialState, action: ActionsTypes): UsersPageType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users:updateObjectInArray(state.users,action.userId,\"id\",{followed:true})\r\n            }\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users,action.userId,\"id\",{followed:false})\r\n            }\r\n        case \"SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case \"SET_TOTAL_USER_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalUserCount: action.totalUserCount\r\n            }\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId]\r\n                    : [...state.followingInProgress.filter(id => id !== action.userId)]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const followSuccess = (userId: number) => {\r\n    return {\r\n        type: 'FOLLOW',\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport const unFollowSuccess = (userId: number) => {\r\n    return {\r\n        type: 'UNFOLLOW',\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport const setUsers = (users: Array<UsersType>) => {\r\n    return {\r\n        type: 'SET_USERS',\r\n        users\r\n    } as const\r\n}\r\n\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: 'SET_CURRENT_PAGE',\r\n        currentPage\r\n    } as const\r\n}\r\n\r\nexport const setTotalUserCount = (totalUserCount: number) => {\r\n    return {\r\n        type: 'SET_TOTAL_USER_COUNT',\r\n        totalUserCount\r\n    } as const\r\n}\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: 'TOGGLE_IS_FETCHING',\r\n        isFetching\r\n    } as const\r\n}\r\n\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching, userId\r\n    } as const\r\n}\r\n\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsTypes>\r\n\r\n\r\nexport const getUsers = (page: number, pageSize: number) => {\r\n    return async (dispatch: DispatchType, getState: GetStateType) => {\r\n        dispatch(setCurrentPage(page))\r\n        dispatch(toggleIsFetching(true))\r\n        let response = await usersApi.setUsers(page, pageSize)\r\n\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(response.items))\r\n        dispatch(setTotalUserCount(response.totalCount))\r\n\r\n    }\r\n}\r\n\r\n\r\nconst followUnfollowFlow = async (dispatch: DispatchType, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: DispatchType, getState: AppStateType) => {\r\n        await followUnfollowFlow(dispatch, userId, usersApi.setFollow.bind(usersApi), followSuccess)\r\n    }\r\n}\r\n\r\nexport const unFollow = (userId: number) => {\r\n    return async (dispatch: DispatchType, getState: AppStateType) => {\r\n        await followUnfollowFlow(dispatch, userId, usersApi.setUnFollow.bind(usersApi), unFollowSuccess)\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer;","import {AppStateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authApi} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\ntype ActionsTypes = ReturnType<typeof setUserData>\r\n\r\n\r\nexport type AuthType = {\r\n    userId: number | null;\r\n    email: string |null;\r\n    isAuth: boolean;\r\n    login: string\r\n}\r\n\r\n\r\nlet initialState: AuthType = {\r\n    userId: null,\r\n    email: null,\r\n    isAuth: false,\r\n    login: ''\r\n}\r\n\r\nexport const authReducer = (state: AuthType = initialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setUserData = (userId :number, email:string,login:string, isAuth:boolean) => {\r\n    return {\r\n        type: 'SET_USER_DATA',\r\n        payload:{userId,email,login,isAuth}\r\n    } as const\r\n}\r\n\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<any>\r\n\r\nexport const getUserData = () => {\r\n    return (dispatch: DispatchType, getState: GetStateType) => {\r\n       return authApi.getAuth().then(data => {\r\n            if (data.resultCode === 0) {\r\n                let {id, email,login} = data.data\r\n                dispatch(setUserData(id, email,login,true))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const login = (email:string, password:string,rememberMe:boolean) => {\r\n    return (dispatch: DispatchType, getState: GetStateType) => {\r\n        authApi.login(email,password,rememberMe).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(getUserData())\r\n            }else {\r\n                let message = res.data.messages.length > 0 ? res.data.messages[0]: \"some error\"\r\n                dispatch(stopSubmit(\"login\", {_error:message}))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const logout = () => {\r\n    return (dispatch: DispatchType, getState: GetStateType) => {\r\n        authApi.logout().then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setUserData(0,'','',false))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default authReducer;","import {AppStateType} from \"./redux-store\";\r\nimport {getUserData} from \"./auth-reducer\";\r\n\r\ntype ActionsTypes = ReturnType<typeof setInitialized>\r\n\r\n\r\nexport type AppType = {\r\n    initialized:boolean\r\n}\r\n\r\n\r\nlet initialState:  AppType = {\r\n    initialized: false,\r\n\r\n}\r\n\r\nexport const appReducer = (state:  AppType = initialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case \"SET_INITIALIZED\":\r\n            return {\r\n                ...state,\r\n                initialized:true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setInitialized = () => {\r\n    return {\r\n        type: 'SET_INITIALIZED',\r\n    } as const\r\n}\r\n\r\ntype GetStateType = () => AppStateType\r\n\r\n\r\nexport const initializeApp = () => {\r\n    return (dispatch:any,getState:GetStateType) => {\r\n        let promise = dispatch(getUserData())\r\n        Promise.all([promise]).then(() => {\r\n            dispatch(setInitialized())\r\n        })\r\n\r\n\r\n        }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default appReducer;","import {combineReducers, createStore, applyMiddleware} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogReducer from \"./dialogs-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogReducer,\r\n    usersPage: usersReducer,\r\n    auth:authReducer,\r\n    form: formReducer,\r\n    app:appReducer\r\n})\r\n\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n// @ts-ignore\r\nwindow.store=store\r\n\r\n\r\nexport type AppStateType= ReturnType<typeof rootReducer>\r\n\r\n\r\n\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './Navbar.module.css'\r\n\r\nconst Navbar = () =>{\r\n    return(\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n               <NavLink to=\"/profile\" >Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\">Dialogs</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\"> News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\">Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\">Settings</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\">Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/login\">Login</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Navbar;\r\n","import React from \"react\"\r\n\r\n\r\n\r\n\r\n\r\nconst Music = () =>{\r\n    return(\r\n        <div>\r\n            music\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Music;","import React from 'react';\r\n\r\n\r\nfunction News(){\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default News;","import React from 'react';\r\n\r\n\r\n\r\n\r\n\r\nfunction Settings (){\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Settings;","import React, {useState} from \"react\";\r\nimport s from \"./Paginator.module.css\"\r\nimport cn from \"classnames\";\r\n\r\n\r\ntype PropsType = {\r\n    currentPage: number\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    onPageChanged: (p: number) => void\r\n    portionSize: number\r\n}\r\n\r\nfunction Paginator({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}: PropsType) {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n\r\n        <div className={s.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() =>{setPortionNumber(portionNumber -1)}}>PREV</button>}\r\n            {pages\r\n                .filter(p=>p >= leftPortionPageNumber && p<= rightPortionPageNumber)\r\n                .map(p => {\r\n                return <span className={ cn({\r\n                    [s.selectedPage]: currentPage === p\r\n                },s.pageNumber)}\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p)\r\n                             }}\r\n                >{p}</span>\r\n            })}\r\n            {portionCount >portionNumber &&\r\n            <button onClick={()=>{setPortionNumber(portionNumber+1)}}>NEXT</button>}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Paginator;","import React from \"react\";\r\nimport {UsersType} from \"../../redux/users-reducer\";\r\nimport s from \"./Users.module.css\"\r\nimport userPhoto from \"../../assets/image/image.png\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nexport type UserPageType = {\r\n    user: UsersType\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\n\r\nfunction User(\r\n    {\r\n        user,\r\n        follow,\r\n        unFollow,\r\n        followingInProgress\r\n    }: UserPageType) {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                            <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                                 className={s.userPhoto}\r\n                            alt={'small'}\r\n                            />\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>{user.followed\r\n                        ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {unFollow(user.id)\r\n                                  }}>Unfollow</button>\r\n                        : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {{follow(user.id)}\r\n                                  }}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"user.location.country\"}</div>\r\n                        <div>{\"user.location.city\"}</div>\r\n                    </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default User;","import React from \"react\";\r\nimport {UsersType} from \"../../redux/users-reducer\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\n\r\nexport type UserPageType = {\r\n    users: Array<UsersType>\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    onPageChanged: (page: number) => void\r\n    totalUserCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    followingInProgress: Array<number>\r\n}\r\n\r\n\r\nfunction Users(\r\n    {\r\n        users,\r\n        follow,\r\n        unFollow,\r\n        onPageChanged,\r\n        totalUserCount,\r\n        pageSize,\r\n        currentPage,\r\n        followingInProgress\r\n    }: UserPageType) {\r\n\r\n    return (\r\n\r\n        <div>\r\n            <Paginator currentPage={currentPage}\r\n                       totalItemsCount={totalUserCount}\r\n                       pageSize={pageSize}\r\n                       onPageChanged={onPageChanged}\r\n                        portionSize={10}\r\n            />\r\n            <div>\r\n                {users.map(u => <User user={u} key={u.id}\r\n                                      follow={follow}\r\n                                      unFollow={unFollow}\r\n                                      followingInProgress={followingInProgress}/>)}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Users;","import {AppStateType} from \"./redux-store\";\r\n\r\n\r\nexport const getUser = (state:AppStateType)=>{\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getPageSize  = (state:AppStateType)=>{\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUserCount  = (state:AppStateType)=>{\r\n    return state.usersPage.totalUserCount\r\n}\r\n\r\nexport const getCurrentPage  = (state:AppStateType)=>{\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching  = (state:AppStateType)=>{\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress  = (state:AppStateType)=>{\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {follow, getUsers, setCurrentPage, unFollow, UsersType} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUserCount,\r\n    getUser\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUserCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\ntype UserPageType = MapDispatchPropsType & MapStatePropsType\r\n\r\nclass UsersContainer extends React.Component<UserPageType> {\r\n\r\n    componentDidMount() {\r\n        const {currentPage, pageSize}=this.props;\r\n        this.props.getUsers(currentPage,pageSize)\r\n    }\r\n\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize}=this.props\r\n        this.props.getUsers(pageNumber, pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                onPageChanged={this.onPageChanged}\r\n                totalUserCount={this.props.totalUserCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unFollow={this.props.unFollow}\r\n                followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUser(state),\r\n        pageSize: getPageSize(state),\r\n        totalUserCount: getTotalUserCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unFollow,\r\n        setCurrentPage,\r\n        getUsers\r\n    })\r\n)(UsersContainer)\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Header.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\ntype HeaderPropsType={\r\n    isAuth:boolean\r\n    login:string\r\n    logout:()=>void\r\n}\r\n\r\n\r\nconst Header = (props:HeaderPropsType) =>{\r\n    return(\r\n        <header className={s.header}>\r\n            <img src='https://cryptologos.cc/logos/aeternity-ae-logo.png'\r\n                alt={'logo'}\r\n            />\r\n       <div className={s.loginBlock}>\r\n           {props.isAuth\r\n               ? <div>{props.login} - <button onClick={props.logout}>Log out</button> </div>\r\n                :<NavLink to='/login'>\r\n                LOGIN\r\n            </NavLink>}\r\n       </div>\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype HeaderContainerProps=MapDispatchPropsType & MapStateToPropsType\r\n\r\ntype MapStateToPropsType ={\r\n    isAuth: boolean\r\n    login:string\r\n\r\n}\r\ntype MapDispatchPropsType={\r\n    logout:()=>void\r\n}\r\n\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerProps> {\r\n    render() {\r\n\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst MapStateToProps=(state: AppStateType):MapStateToPropsType=>{\r\n    return{\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default  connect(MapStateToProps,{logout})(HeaderContainer);","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/TextArea\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport s from \"../common/FormsControls/TextArea.module.css\"\r\n\r\n\r\nconst LoginForm = ({handleSubmit, error}: any) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'Email'} name={'email'} component={Input}\r\n                       validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'Password'} name={'password'} type={'password'} component={Input}\r\n                       validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field type={'checkbox'} name={'rememberMe'} component={Input}/>\r\n                remember me\r\n            </div>\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n\r\n\r\n\r\n\r\nconst Login = (props: any) => {\r\n\r\n    const onSubmit = (formData: any) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Music from \"./components/Music/Music\";\r\nimport News from \"./components/News/News\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport {Route} from \"react-router-dom\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\n\r\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"))\r\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"))\r\n\r\n\r\ntype AppProps = MapDispatchPropsType & MapStateToPropsType\r\n\r\ntype MapDispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\ntype MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\n\r\n\r\nclass App extends React.Component<AppProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized)\r\n            return <Preloader/>\r\n\r\n        return (\r\n            <div className=\"app-wrapper\">\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Route path=\"/dialogs\"\r\n                           render={() => {\r\n                               return <React.Suspense fallback={<Preloader/>}>\r\n                                   <DialogsContainer/>\r\n                               </React.Suspense>\r\n                           }}/>\r\n                    <Route path=\"/profile/:userId?\" render={() => {\r\n                        return <React.Suspense fallback={<Preloader/>}>\r\n                            <ProfileContainer/>\r\n                        </React.Suspense>\r\n                    }}/>\r\n                    <Route path=\"/music\" render={() => <Music/>}/>\r\n                    <Route path=\"/news\" render={() => <News/>}/>\r\n                    <Route path=\"/settings\" render={() => <Settings/>}/>\r\n                    <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n                    <Route path=\"/login\" render={() => <Login/>}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\n\r\nexport default connect(MapStateToProps, {initializeApp})(App);\r\n\r\n\r\n\r\n","import store from \"./redux/redux-store\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n    , document.getElementById('root'))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport preloader from \"../../../assets/image/preloader.gif\";\r\n\r\n\r\n\r\nconst Preloader = ()=>{\r\n    return(\r\n        <div>\r\n            <img src={preloader}\r\n            alt={\"preloader\"}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"TextArea_formControl__qsM9L\",\"error\":\"TextArea_error__3jrad\",\"formSummaryError\":\"TextArea_formSummaryError__3JgpO\"};","import React from 'react';\r\nimport s from './TextArea.module.css'\r\n\r\n\r\nconst FormControl = ({input,meta,child, ...props}:any)=>{\r\n    const hasError = meta.touched &&  meta.error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' +(hasError ?s.error : '') }>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport const TextArea = (props:any) => {\r\n    const {input,meta,child, ...restProps} = props\r\n    return <FormControl {...props}> <textarea {...input} {...restProps}/></FormControl>\r\n};\r\n\r\n\r\nexport const Input = (props:any) => {\r\n    const {input,meta,child, ...restProps} = props\r\n    return <FormControl {...props}> <input {...input} {...restProps}/></FormControl>\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__2Gd5r\"};","\r\n\r\nexport const required = (value:string) =>{\r\n    if(value) return undefined\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator= (maxLength:number) => (value:string) =>{\r\n    if(value && value.length > maxLength) return `Max length ${maxLength} symbols `\r\n    return undefined\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3sFD7\",\"loginBlock\":\"Header_loginBlock__3r8H4\"};","import {AppStateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {profileApi} from \"../api/api\";\r\n\r\ntype ActionsTypes =\r\n    ReturnType<typeof addPost>\r\n    | ReturnType<typeof updateNewPost>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n\r\n\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    profile: any\r\n    status: string\r\n}\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    photos: PhotoType\r\n    userId: number\r\n}\r\n\r\ntype ContactsType = {\r\n    facebook: string\r\n    github: string\r\n    instagram: string\r\n}\r\ntype PhotoType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\n\r\nlet initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: 0, message: 'Hi, how are you?', likesCount: 15},\r\n        {id: 1, message: \"It's my first post\", likesCount: 17}\r\n    ],\r\n    newPostText: \"cdscdscsdc\",\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ActionsTypes): ProfilePageType => {\r\n\r\n    switch (action.type) {\r\n        case 'ADD-POST':\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {id: 3, message: action.postMessage, likesCount: 0}]\r\n            }\r\n        case 'UPDATE-NEW-POST':\r\n            return {\r\n                ...state,\r\n                newPostText: action.newPostText\r\n            }\r\n        case 'SET-USER-PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case \"SET-STATUS\":\r\n            return {\r\n                ...state,\r\n                status:action.status\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const addPost = (postMessage: string) => {\r\n    return {\r\n        type: 'ADD-POST',\r\n        postMessage\r\n    } as const\r\n}\r\n\r\nexport const updateNewPost = (newPostText: string) => {\r\n    return {\r\n        type: 'UPDATE-NEW-POST',\r\n        newPostText\r\n    } as const\r\n}\r\n\r\nexport const setUserProfile = (profile: any) => {\r\n    return {\r\n        type: 'SET-USER-PROFILE',\r\n        profile\r\n    } as const\r\n}\r\n\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: 'SET-STATUS',\r\n        status\r\n    } as const\r\n}\r\n\r\n\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsTypes>\r\n\r\nexport const getUserProfile = (userId: number) => {\r\n    return (dispatch: DispatchType, getStateType: GetStateType) => {\r\n        profileApi.getProfile(userId).then(data => {\r\n            dispatch(setUserProfile(data))\r\n        })\r\n    }\r\n}\r\n\r\nexport const getStatus = (userId: number) => {\r\n    return (dispatch: DispatchType, getStateType: GetStateType) => {\r\n        profileApi.getStatus(userId).then(data => {\r\n            dispatch(setStatus(data))\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateStatus = (status: string) => {\r\n    return (dispatch: DispatchType, getStateType: GetStateType) => {\r\n        profileApi.updateStatus(status).then(data=> {\r\n            if(data.resultCode === 0) {\r\n                dispatch(setStatus(status))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\ntype mapStatePropsType={\r\n    isAuth:boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth)\r\n            return <Redirect to={'/login'} />\r\n\r\n        return <Component  {...restProps as T}/>\r\n\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}"],"sourceRoot":""}