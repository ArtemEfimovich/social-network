{"version":3,"sources":["components/Profile/MyPosts/Post/Posts.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileInfo","profile","src","photos","large","alt","fullName","contacts","github","lookingForAJobDescription","vk","Preloader","Post","className","s","item","message","likesCount","maxLength","maxLengthCreator","AddPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","name","placeholder","validate","required","MyPosts","postsElements","profilePage","posts","map","p","key","id","postsBlock","values","postMessage","newPost","addPost","connect","state","Profile","MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","React","Component","compose","auth","isAuth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.797c9c80.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Posts_item__1c3qT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1jgAn\",\"posts\":\"MyPosts_posts__1aC8B\"};","import React, {useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string;\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n\r\n\r\n    const activateEditMode = () => setEditMode(true)\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n\r\n    }\r\n\r\n    const onStatusChange = (e:React.ChangeEvent<HTMLInputElement>)=>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"-------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input  onChange={onStatusChange} onBlur={deActivateEditMode} autoFocus={true} value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: any\r\n    status:string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n           {/* <div className={s.img}>\r\n                <img\r\n                    src=\"https://images.unsplash.com/photo-1500964757637-c85e8a162699?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1078&q=80\"/>\r\n            </div>*/}\r\n            <div>\r\n                <img src={props.profile.photos.large}\r\n                alt={'large'}\r\n                />\r\n            </div>\r\n            <div>\r\n                <ProfileStatusWithHooks status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                />\r\n            </div>\r\n            <div>\r\n                {props.profile.fullName}\r\n                {props.profile.contacts.github}\r\n                {props.profile.lookingForAJobDescription}\r\n            </div>\r\n            <div>\r\n                {props.profile.contacts.vk}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from \"./Posts.module.css\"\r\n\r\n\r\ntype PostsPropsType={\r\n    id:number\r\n    message: string\r\n    likesCount:number\r\n}\r\n\r\nfunction Post (props:PostsPropsType){\r\n    return(\r\n        <div className={s.item}>\r\n            <img src={\"https://i.redd.it/z394307odi741.png\"} alt={\"https://i.redd.it/z394307odi741.png\"}/>\r\n            {props.message}\r\n            <div>\r\n                <span>Like</span>{props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Post;","import React from \"react\";\r\nimport Post from \"./Post/Post\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport {ProfilePageType} from \"../../../redux/profile-reducer\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControls/TextArea\";\r\n\r\n\r\ntype MyPostsPageType = {\r\n    profilePage: ProfilePageType\r\n    addPost: (postMessage: string) => void\r\n}\r\n\r\n\r\nconst maxLength = maxLengthCreator(30)\r\n\r\nfunction MyPosts(props: MyPostsPageType) {\r\n    const postsElements =\r\n        props.profilePage.posts.map(p => <Post key={p.id} id={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n\r\n    const onSendPost = (postMessage: string) => {\r\n        props.addPost(postMessage)\r\n    }\r\n\r\n\r\n    const addNewPost = (values: any) => {\r\n        onSendPost(values.newPost)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddPostReduxForm onSubmit={addNewPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst AddPostForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea} name='newPost' placeholder='Enter your post'\r\n                       validate={[ required,maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostReduxForm = reduxForm({form: 'addPost'})(AddPostForm)\r\n\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {addPost, ProfilePageType} from \"../../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\ntype MapStatePropsType = {\r\n    profilePage: ProfilePageType\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {addPost})(MyPosts)\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: any\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: any\r\n}\r\ntype MapStatePropsType = {\r\n    profile: any\r\n    status: string\r\n    authorizedUserId:number | null\r\n    isAuth:boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype ProfileContainerPropsType = MapDispatchPropsType & MapStatePropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if(!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}