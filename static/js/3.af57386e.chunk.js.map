{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Posts.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileDataFormReduxForm","reduxForm","form","Field","placeholder","name","component","Input","type","TextArea","ProfileData","isOwner","onClick","profile","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","contactTitle","contactValue","Contacts","className","s","ProfileInfo","Preloader","src","photos","large","userPhoto","profileImg","target","files","length","savePhoto","Post","item","alt","message","likesCount","maxLength","maxLengthCreator","AddPostReduxForm","onSubmit","handleSubmit","validate","required","MyPosts","postsElements","profilePage","posts","p","id","postsBlock","values","postMessage","newPost","addPost","connect","state","Profile","MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","React","Component","compose","auth","isAuth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.af57386e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"ProfileInfo_img__2BPeY\",\"profileImg\":\"ProfileInfo_profileImg__Mp-ET\",\"contacts\":\"ProfileInfo_contacts__6KgCK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Posts_item__1c3qT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1jgAn\",\"posts\":\"MyPosts_posts__1aC8B\"};","import React, {useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string;\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n\r\n\r\n    const activateEditMode = () => setEditMode(true)\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n\r\n    }\r\n\r\n    const onStatusChange = (e:React.ChangeEvent<HTMLInputElement>)=>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                Status :<span onDoubleClick={activateEditMode}>{props.status || \"-------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input  onChange={onStatusChange} onBlur={deActivateEditMode} autoFocus={true} value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport {Contacts} from \"./ProfileInfo\";\r\nimport {reduxForm, Field} from \"redux-form\";\r\nimport {Input, TextArea} from \"../../common/FormsControls/TextArea\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\n\r\n\r\nconst ProfileDataForm = () => {\r\n    return (\r\n        <form>\r\n            <div>\r\n                <button >save</button>\r\n            </div>\r\n            <div>\r\n                Full name:  <Field placeholder={'Full name'} name={'fullName'} component={Input}\r\n                                  />\r\n            </div>\r\n            <div>\r\n                Looking for a job : <Field placeholder={''} name={'lookingForAJob'} component={Input}\r\n                                          type={'checkbox'} />\r\n                {\r\n                <div>\r\n                    Skills : <Field placeholder={'Skills'} name={'lookingForAJobDescription'} component={TextArea}\r\n                                    />\r\n                </div>}\r\n            </div>\r\n            <div>\r\n                About me:\r\n            </div>\r\n            <div>\r\n               {/* Contacts : {Object.keys(profile.contacts).map(key => {\r\n                return <Contacts key={key} contactTitle={key} contactValue={profile.contacts[key]}/>*/}\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form:'profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from 'react';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/image/image.png\"\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\ntype ProfileInfoType = {\r\n    isOwner: boolean\r\n    profile: any\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photo: string) => void\r\n}\r\n\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const mainPhotoSelectedOn = (e: any) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src={props.profile.photos.large || userPhoto}\r\n                     className={s.profileImg}\r\n                />\r\n                {props.isOwner && <input type={'file'} onChange={mainPhotoSelectedOn}/>}\r\n            </div>\r\n            <div>\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n            <div>\r\n                {editMode ?\r\n                    <ProfileDataForm\r\n\r\n                /> : <ProfileData\r\n                    profile={props.profile}\r\n                    isOwner={props.isOwner}\r\n                    setEditMode={()=>{setEditMode(true)}}\r\n                />}\r\n\r\n            </div>\r\n        </div>\r\n        \r\n)\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst ProfileData = (props: any) => {\r\n    return <div>\r\n        {props.isOwner && <div><button onClick={props.setEditMode}>edit</button></div>}\r\n        <div>\r\n            Full name: {props.profile.fullName}\r\n        </div>\r\n        <div>\r\n            Looking for a job :{props.profile.lookingForAJob ? 'yes' : 'no'}\r\n            {props.profile.lookingForAJob &&\r\n            <div>\r\n                Skills : {props.profile.lookingForAJobDescription}\r\n            </div>}\r\n        </div>\r\n        <div>\r\n            About me:{props.profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            Contacts : {Object.keys(props.profile.contacts).map(key => {\r\n            return <Contacts key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\nexport const  Contacts = ({contactTitle, contactValue}: any) => {\r\n    return <div className={s.contacts}>\r\n        {contactTitle} : {contactValue}\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from \"./Posts.module.css\"\r\n\r\n\r\ntype PostsPropsType={\r\n    id:number\r\n    message: string\r\n    likesCount:number\r\n}\r\n\r\nfunction Post (props:PostsPropsType){\r\n    return(\r\n        <div className={s.item}>\r\n            <img src={\"https://i.redd.it/z394307odi741.png\"} alt={\"https://i.redd.it/z394307odi741.png\"}/>\r\n            {props.message}\r\n            <div>\r\n                <span>Like</span>{props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Post;","import React from \"react\";\r\nimport Post from \"./Post/Post\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport {ProfilePageType} from \"../../../redux/profile-reducer\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControls/TextArea\";\r\n\r\n\r\ntype MyPostsPageType = {\r\n    profilePage: ProfilePageType\r\n    addPost: (postMessage: string) => void\r\n}\r\n\r\n\r\nconst maxLength = maxLengthCreator(30)\r\n\r\nfunction MyPosts(props: MyPostsPageType) {\r\n    const postsElements =\r\n        props.profilePage.posts.map(p => <Post key={p.id} id={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n\r\n    const onSendPost = (postMessage: string) => {\r\n        props.addPost(postMessage)\r\n    }\r\n\r\n\r\n    const addNewPost = (values: any) => {\r\n        onSendPost(values.newPost)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddPostReduxForm onSubmit={addNewPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst AddPostForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea} name='newPost' placeholder='Enter your post'\r\n                       validate={[ required,maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostReduxForm = reduxForm({form: 'addPost'})(AddPostForm)\r\n\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {addPost, ProfilePageType} from \"../../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\ntype MapStatePropsType = {\r\n    profilePage: ProfilePageType\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {addPost})(MyPosts)\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\ntype ProfilePropsType = {\r\n    isOwner:boolean\r\n    profile: any\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto:(photo:string)=>void\r\n}\r\n\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                        savePhoto={props.savePhoto}\r\n                        isOwner={props.isOwner}\r\n                        profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, savePhoto, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: any\r\n}\r\ntype MapStatePropsType = {\r\n    profile: any\r\n    status: string\r\n    authorizedUserId:number | null\r\n    isAuth:boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto:(photo:string)=>void\r\n}\r\ntype ProfileContainerPropsType = MapDispatchPropsType & MapStatePropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile(){\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if(!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps:PropsType,prevState:AppStateType,snapshot:any)  {\r\n        if(this.props.match.params.userId != prevProps.match.params.userId)\r\n        this.refreshProfile()\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus,savePhoto}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}