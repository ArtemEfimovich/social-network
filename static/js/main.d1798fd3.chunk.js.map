{"version":3,"sources":["redux/dialogs-reducer.ts","assets/image/image.png","api/api.ts","components/Users/Users.module.css","assets/image/preloader.gif","components/Navbar/Navbar.module.css","utils/objects-helper.ts","redux/users-reducer.ts","redux/auth-reducer.ts","redux/app-reducer.ts","api/news_api.ts","redux/news-reducer.ts","redux/redux-store.ts","components/Navbar/Navbar.tsx","components/Music/Music.tsx","components/News/NewsCard/NewsCard.tsx","components/News/News.tsx","components/Settings/Settings.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/News/NewsCard/NewsCard.module.css","components/common/Preloader/Preloader.tsx","components/common/FormsControls/TextArea.module.css","components/common/FormsControls/TextArea.tsx","components/common/Paginator/Paginator.module.css","utils/validators/validators.ts","components/Header/Header.module.css","redux/profile-reducer.ts","hoc/withAuthRedirect.tsx"],"names":["initialState","dialogs","id","name","messages","message","newMessage","AddMessageActionCreator","type","dialogReducer","state","action","module","exports","instance","axios","create","withCredentials","baseURL","headers","usersApi","setUsers","currentPage","pageSize","get","then","response","data","setFollow","userId","post","setUnFollow","delete","profileApi","getProfile","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","authApi","getAuth","login","email","password","rememberMe","logout","securityApi","getCaptchaUrl","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","totalUserCount","isFetching","followingInProgress","followSuccess","unFollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","filter","isAuth","captchaUrl","setUserData","payload","getUserData","getState","url","getCaptchaUrlSuccess","authReducer","initialized","appReducer","newsAPI","sources","q","language","country","category","params","articles","source","author","title","description","urlToImage","publishedAt","content","error","rootReducer","combineReducers","profilePage","profileReducer","dialogPage","usersPage","auth","form","formReducer","app","news","store","createStore","applyMiddleware","thunkMiddleware","window","Navbar","className","s","nav","item","to","Music","NewsCard","wrapperContainer","image","src","alt","container","subtitle","href","News","useDispatch","useSelector","useEffect","catch","setErrorAC","key","Settings","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","onClick","p","cn","selectedPage","pageNumber","e","User","user","follow","unFollow","photos","small","userPhoto","disabled","some","Users","getUser","getPageSize","getTotalUserCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","props","getUsers","this","Preloader","React","Component","compose","withAuthRedirect","connect","bind","page","totalCount","Header","header","loginBlock","HeaderContainer","res","LoginReduxForm","reduxForm","handleSubmit","onSubmit","Field","placeholder","component","Input","validate","required","formSummaryError","length","stopSubmit","_error","captcha","DialogsContainer","lazy","ProfileContainer","App","catchAllUnhandledErrors","alert","initializeApp","addEventListener","removeEventListener","exact","path","render","Suspense","fallback","promise","Promise","all","ReactDOM","document","getElementById","preloader","FormControl","input","meta","child","hasError","touched","formControl","children","TextArea","restProps","value","maxLengthCreator","maxLength","posts","likesCount","newPostText","addPost","postMessage","setStatus","getUserProfile","getStateType","file","mapStateToPropsForRedirect"],"mappings":"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","file":"static/js/main.d1798fd3.chunk.js","sourcesContent":["type ActionsTypes = ReturnType<typeof AddMessageActionCreator>\r\n    | ReturnType<typeof UpdateNewMessageActionCreator>\r\n\r\n\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    newMessage: string\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessagesType = {\r\n    id: number\r\n    message: string\r\n\r\n}\r\n\r\n\r\nlet initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Artem'},\r\n        {id: 3, name: 'Roman'},\r\n        {id: 4, name: 'Vadim'},\r\n        {id: 5, name: 'Vladimir'},\r\n        {id: 6, name: 'Maria'}\r\n    ],\r\n    messages: [\r\n        {id: 0, message: \"Hi.\"},\r\n        {id: 1, message: \"I'am fine\"},\r\n        {id: 2, message: \"How are you?\"}],\r\n    newMessage: \"\",\r\n}\r\n\r\n\r\nconst dialogReducer = (state: DialogsPageType = initialState, action: ActionsTypes): DialogsPageType => {\r\n\r\n    switch (action.type) {\r\n        case 'ADD-MESSAGE':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 3, message: action.message}]\r\n            }\r\n\r\n        case 'UPDATE-NEW-MESSAGE':\r\n            return {\r\n                ...state,\r\n                newMessage: action.newMessage\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const AddMessageActionCreator = (message: string) => {\r\n    return {\r\n        type: 'ADD-MESSAGE',\r\n        message: message\r\n    } as const\r\n}\r\n\r\nexport const UpdateNewMessageActionCreator = (newMessage: string) => {\r\n    return {\r\n        type: 'UPDATE-NEW-MESSAGE',\r\n        newMessage: newMessage\r\n    } as const\r\n}\r\n\r\n\r\nexport default dialogReducer;","module.exports = __webpack_public_path__ + \"static/media/image.4e4422c6.png\";","import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"369a3457-d3e2-4331-b490-319ddee29442\"\r\n    }\r\n})\r\n\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport type LoginParamsType={\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean | false\r\n    captcha?: string\r\n}\r\n\r\n\r\n\r\nexport const usersApi = {\r\n    setUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    setFollow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    setUnFollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n}\r\n\r\n\r\nexport const profileApi = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    updateStatus(status: string){\r\n        return instance.put(`profile/status`, {status})\r\n            .then(response =>{\r\n                return response.data\r\n            }\r\n        )\r\n    },\r\n    savePhoto(photoFile:any){\r\n        const formData= new FormData()\r\n        formData.append(\"image\",photoFile)\r\n        return instance.put(`profile/photo`,formData,{\r\n            headers:{\r\n                'Content-Type':'multipart/form-data'\r\n            }\r\n        }).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    saveProfile(profile:any){\r\n        return instance.put(`profile`, profile)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n\r\n}\r\nexport const authApi = {\r\n    getAuth() {\r\n        return instance.get(`auth/me`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    login(email: string, password: string,rememberMe: boolean= false ){\r\n        return instance.post('auth/login',{email,password,rememberMe})\r\n    },\r\n    logout(){\r\n        return instance.delete('auth/login')\r\n    }\r\n}\r\n\r\n\r\nexport const securityApi = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__2Tihg\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.1714aebd.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__320r_\",\"item\":\"Navbar_item__3ZbLW\",\"activeLink\":\"Navbar_activeLink__2Napf\"};","export const updateObjectInArray = (items: any, itemId: number, objPropName: any, newObjProps: any) => {\r\n\r\n   return items.map((u: { [x: string]: number }) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u\r\n    })\r\n\r\n}\r\n\r\n\r\n\r\n","import {usersApi} from \"../api/api\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {updateObjectInArray} from \"../utils/objects-helper\";\r\n\r\ntype ActionsTypes =\r\n    | ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unFollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUserCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\n\r\nexport type UsersPageType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUserCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport type UsersType = {\r\n    id: number\r\n    photos: PhotosType\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n}\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\ntype LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\n\r\nlet initialState: UsersPageType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUserCount: 10,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n\r\n}\r\n\r\nexport const usersReducer = (state: UsersPageType = initialState, action: ActionsTypes): UsersPageType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users:updateObjectInArray(state.users,action.userId,\"id\",{followed:true})\r\n            }\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users,action.userId,\"id\",{followed:false})\r\n            }\r\n        case \"SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case \"SET_TOTAL_USER_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalUserCount: action.totalUserCount\r\n            }\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId]\r\n                    : [...state.followingInProgress.filter(id => id !== action.userId)]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const followSuccess = (userId: number) => {\r\n    return {\r\n        type: 'FOLLOW',\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport const unFollowSuccess = (userId: number) => {\r\n    return {\r\n        type: 'UNFOLLOW',\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport const setUsers = (users: Array<UsersType>) => {\r\n    return {\r\n        type: 'SET_USERS',\r\n        users\r\n    } as const\r\n}\r\n\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: 'SET_CURRENT_PAGE',\r\n        currentPage\r\n    } as const\r\n}\r\n\r\nexport const setTotalUserCount = (totalUserCount: number) => {\r\n    return {\r\n        type: 'SET_TOTAL_USER_COUNT',\r\n        totalUserCount\r\n    } as const\r\n}\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: 'TOGGLE_IS_FETCHING',\r\n        isFetching\r\n    } as const\r\n}\r\n\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching, userId\r\n    } as const\r\n}\r\n\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsTypes>\r\n\r\n\r\nexport const getUsers = (page: number, pageSize: number) => {\r\n    return async (dispatch: DispatchType, getState: GetStateType) => {\r\n        dispatch(setCurrentPage(page))\r\n        dispatch(toggleIsFetching(true))\r\n        let response = await usersApi.setUsers(page, pageSize)\r\n\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(response.items))\r\n        dispatch(setTotalUserCount(response.totalCount))\r\n\r\n    }\r\n}\r\n\r\n\r\nconst followUnfollowFlow = async (dispatch: DispatchType, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: DispatchType, getState: AppStateType) => {\r\n        await followUnfollowFlow(dispatch, userId, usersApi.setFollow.bind(usersApi), followSuccess)\r\n    }\r\n}\r\n\r\nexport const unFollow = (userId: number) => {\r\n    return async (dispatch: DispatchType, getState: AppStateType) => {\r\n        await followUnfollowFlow(dispatch, userId, usersApi.setUnFollow.bind(usersApi), unFollowSuccess)\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer;","import {AppStateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authApi, securityApi} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\ntype ActionsTypes = ReturnType<typeof setUserData>\r\n| ReturnType<typeof getCaptchaUrlSuccess>\r\n\r\n\r\nexport type AuthType = {\r\n    userId: number;\r\n    email: string | null;\r\n    isAuth: boolean;\r\n    login: string\r\n    captchaUrl:string |null\r\n}\r\n\r\n\r\nlet initialState: AuthType = {\r\n    userId: 0,\r\n    email: null,\r\n    isAuth: false,\r\n    login: '',\r\n    captchaUrl: null\r\n}\r\n\r\nexport const authReducer = (state: AuthType = initialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case \"GET_CAPTCHA_URL\":\r\n            return{\r\n                ...state,captchaUrl:action.captchaUrl\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setUserData = (userId: number, email: string, login: string, isAuth: boolean) => {\r\n    return {\r\n        type: 'SET_USER_DATA',\r\n        payload: {userId, email, login, isAuth}\r\n    } as const\r\n}\r\n\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl:string)=>{\r\n    return{\r\n        type:'GET_CAPTCHA_URL',\r\n        captchaUrl\r\n    }as const\r\n}\r\n\r\n\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<any>\r\n\r\nexport const getUserData = () => {\r\n    return (dispatch: DispatchType, getState: GetStateType) => {\r\n        return authApi.getAuth().then(data => {\r\n            if (data.resultCode === 0) {\r\n                let {id, email, login} = data.data\r\n                dispatch(setUserData(id, email, login, true))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean) => {\r\n    return (dispatch: DispatchType, getState: GetStateType) => {\r\n        authApi.login(email, password, rememberMe).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(getUserData())\r\n            } else {\r\n                if (res.data.resultCode === 10) {\r\n                    dispatch(getCaptchaUrl())\r\n                }\r\n                let message = res.data.messages.length > 0 ? res.data.messages[0] : \"some error\"\r\n                dispatch(stopSubmit(\"login\", {_error: message}))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const logout = () => {\r\n    return (dispatch: DispatchType, getState: GetStateType) => {\r\n        authApi.logout().then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setUserData(0, '', '', false))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getCaptchaUrl = () => {\r\n    return (dispatch: DispatchType, getState: GetStateType) => {\r\n        securityApi.getCaptchaUrl().then(data => {\r\n                const captchaUrl = data.data.url\r\n                dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default authReducer;","import {AppStateType} from \"./redux-store\";\r\nimport {getUserData} from \"./auth-reducer\";\r\n\r\ntype ActionsTypes = ReturnType<typeof setInitialized>\r\n\r\n\r\nexport type AppType = {\r\n    initialized:boolean\r\n}\r\n\r\n\r\nlet initialState:  AppType = {\r\n    initialized: false,\r\n\r\n}\r\n\r\nexport const appReducer = (state:  AppType = initialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case \"SET_INITIALIZED\":\r\n            return {\r\n                ...state,\r\n                initialized:true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setInitialized = () => {\r\n    return {\r\n        type: 'SET_INITIALIZED',\r\n    } as const\r\n}\r\n\r\ntype GetStateType = () => AppStateType\r\n\r\n\r\nexport const initializeApp = () => {\r\n    return (dispatch:any,getState:GetStateType) => {\r\n        let promise = dispatch(getUserData())\r\n        Promise.all([promise]).then(() => {\r\n            dispatch(setInitialized())\r\n        })\r\n\r\n\r\n        }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default appReducer;","import axios, {AxiosResponse} from \"axios\";\r\n\r\n\r\nexport type ResponseNewsType = {\r\n    status: string,\r\n    totalResults: number,\r\n    articles: Array<ArticlesType>\r\n\r\n}\r\n\r\n\r\nexport type ArticlesType = {\r\n    source: SourceType\r\n    author: string,\r\n    title: string,\r\n    description: string,\r\n    url: string,\r\n    urlToImage: string,\r\n    publishedAt: string\r\n    content: string\r\n}\r\n\r\n\r\nexport type SourceType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://newsapi.org/v2/',\r\n})\r\n\r\n\r\nexport const newsAPI = {\r\n    getNews(sources?:string|null, q?:string|null, language?:string|null, country?:string|null, category?:string|null) {\r\n      return instance.get<{params:{sources?:string|null, q?:string|null, language?:string|null, country?:string|null, category?:string|null}},AxiosResponse<ResponseNewsType>>(\r\n            'everything?'+\r\n                'q=Apple&' +\r\n            'from=2021-11-11&' +\r\n            'sortBy=popularity&' +\r\n            'apiKey=3d5ebf17d7d3402783a28bda3e0c1759',{params:{sources, q, language, country, category}})\r\n            .then(response =>{\r\n                return response.data\r\n            })\r\n    }\r\n}\r\n\r\n","import {ArticlesType, newsAPI} from \"../api/news_api\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n\r\ntype ActionsTypes =\r\n    ReturnType<typeof setNewsAC> |\r\n    ReturnType<typeof setErrorAC>\r\n\r\n\r\nexport type NewsReducerType = {\r\n    articles: ArticlesType[]\r\n    error: string | null\r\n}\r\n\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsTypes>\r\n\r\n\r\nlet initialState: NewsReducerType = {\r\n    articles: [\r\n        {\r\n            source: {\r\n                id: \"the-verge\",\r\n                name: \"The Verge\"\r\n            },\r\n            author: \"Jay Peters\",\r\n            title: \"You can see Netflix’s new AV1 streaming tech on select TVs and the PS4 Pro\",\r\n            description: \"Netflix now supports the AV1 codec when streaming to some TVs. It’s only available on a select number of devices to start, though that list includes any TV connected to the PS4 Pro.\",\r\n            url: \"https://www.theverge.com/2021/11/10/22775150/netflix-av1-codec-tv-streaming-ps4-pro\",\r\n            urlToImage: \"https://cdn.vox-cdn.com/thumbor/z7NKhXwT3kSZUT8D0tQmI_Moz74=/0x146:2040x1214/fit-in/1200x630/cdn.vox-cdn.com/uploads/chorus_asset/file/13370033/acastro_181101_1777_netflix_0001.jpg\",\r\n            publishedAt: \"2021-11-11T01:47:49Z\",\r\n            content: \"Netflix first used AV1 on Android\\r\\nIllustration by Alex Castro / The Verge\\r\\nNetflix now supports the AV1 codec when streaming to some TVs, the company announced on Tuesday. Its only available on a se… [+2046 chars]\",\r\n        }\r\n    ],\r\n    error: null\r\n}\r\n\r\n\r\nexport const newsReducer = (state: NewsReducerType = initialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case \"SET-NEWS\":\r\n            return {\r\n                ...state,\r\n                articles: action.articles\r\n            }\r\n        case \"SET-ERROR\":\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setNewsAC = (articles: ArticlesType[]) => {\r\n    return {\r\n        type: 'SET-NEWS',\r\n        articles\r\n    } as const\r\n}\r\n\r\nexport const setErrorAC = (error: string) => {\r\n    return {\r\n        type: 'SET-ERROR',\r\n        error\r\n    } as const\r\n}\r\n\r\n\r\nexport const getNewsTC = () => {\r\n    return (dispatch: DispatchType, getState: GetStateType) => {\r\n        newsAPI.getNews().then(data => {\r\n            if (data.status === 'ok') {\r\n                dispatch(setNewsAC(data.articles))\r\n            }\r\n        })\r\n            .catch((error: AxiosError) => {\r\n                dispatch(setErrorAC(error.message))\r\n            })\r\n    }\r\n}\r\n\r\n\r\n","import {combineReducers, createStore, applyMiddleware} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogReducer from \"./dialogs-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport appReducer from \"./app-reducer\";\r\nimport {newsReducer} from \"./news-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    news: newsReducer\r\n})\r\n\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './Navbar.module.css'\r\n\r\nconst Navbar = () =>{\r\n    return(\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n               <NavLink to=\"/profile\" >Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\">Dialogs</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\"> News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\">Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\">Settings</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\">Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/login\">Login</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Navbar;\r\n","import React from \"react\"\r\n\r\n\r\n\r\n\r\n\r\nconst Music = () =>{\r\n    return(\r\n        <div>\r\n            music\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Music;","import React from 'react';\r\nimport {SourceType} from \"../../../api/news_api\";\r\nimport s from \"./NewsCard.module.css\"\r\n\r\nexport type NewsCardType = {\r\n    source: SourceType\r\n    author: string,\r\n    title: string,\r\n    description: string,\r\n    url: string,\r\n    urlToImage: string,\r\n    publishedAt: string\r\n    content: string\r\n}\r\n\r\n\r\n\r\nconst NewsCard = ({source,author, title, description,url,urlToImage, publishedAt,content}:NewsCardType)=>{\r\n    return (\r\n        <div className={s.wrapperContainer}>\r\n            <div className={s.image}>\r\n                <img src={urlToImage} alt=\"image\"/>\r\n            </div>\r\n            <div className={s.container}>\r\n                <div className={s.title}>{title}</div>\r\n                <div className={s.subtitle}>\r\n                    <div>{author}</div>\r\n                    <div>{source.name}</div>\r\n                    <div>{publishedAt}</div>\r\n                </div>\r\n                <div className={s.description}>{description}</div>\r\n                <a href={url}/>\r\n                <div>{content}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewsCard;","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getNewsTC} from \"../../redux/news-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ArticlesType} from \"../../api/news_api\";\r\nimport NewsCard from \"./NewsCard/NewsCard\";\r\n\r\n\r\nfunction News() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const articles = useSelector<AppStateType, ArticlesType[]>(state => state.news.articles)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getNewsTC())\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            {articles.map(({source,\r\n                               author,\r\n                               title,\r\n                               description,\r\n                               url,\r\n                               urlToImage,\r\n                               publishedAt,\r\n                               content\r\n                           }) => {\r\n                return (<div key={title}>\r\n                    <NewsCard source={source}\r\n                              author={author}\r\n                              title={title}\r\n                              description={description}\r\n                              url={url}\r\n                              urlToImage={urlToImage}\r\n                              publishedAt={publishedAt}\r\n                              content={content}/>\r\n                </div>)\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default News;","import React from 'react';\r\n\r\n\r\n\r\n\r\n\r\nfunction Settings (){\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Settings;","import React, {useState} from \"react\";\r\nimport s from \"./Paginator.module.css\"\r\nimport cn from \"classnames\";\r\n\r\n\r\ntype PropsType = {\r\n    currentPage: number\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    onPageChanged: (p: number) => void\r\n    portionSize: number\r\n}\r\n\r\nfunction Paginator({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}: PropsType) {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n\r\n        <div className={s.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() =>{setPortionNumber(portionNumber -1)}}>PREV</button>}\r\n            {pages\r\n                .filter(p=>p >= leftPortionPageNumber && p<= rightPortionPageNumber)\r\n                .map(p => {\r\n                return <span className={ cn({\r\n                    [s.selectedPage]: currentPage === p\r\n                },s.pageNumber)}\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p)\r\n                             }}\r\n                >{p}</span>\r\n            })}\r\n            {portionCount >portionNumber &&\r\n            <button onClick={()=>{setPortionNumber(portionNumber+1)}}>NEXT</button>}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Paginator;","import React from \"react\";\r\nimport {UsersType} from \"../../redux/users-reducer\";\r\nimport s from \"./Users.module.css\"\r\nimport userPhoto from \"../../assets/image/image.png\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nexport type UserPageType = {\r\n    user: UsersType\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\n\r\nfunction User(\r\n    {\r\n        user,\r\n        follow,\r\n        unFollow,\r\n        followingInProgress\r\n    }: UserPageType) {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                            <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                                 className={s.userPhoto}\r\n                            alt={'small'}\r\n                            />\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>{user.followed\r\n                        ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {unFollow(user.id)\r\n                                  }}>Unfollow</button>\r\n                        : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {{follow(user.id)}\r\n                                  }}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"user.location.country\"}</div>\r\n                        <div>{\"user.location.city\"}</div>\r\n                    </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default User;","import React from \"react\";\r\nimport {UsersType} from \"../../redux/users-reducer\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\n\r\nexport type UserPageType = {\r\n    users: Array<UsersType>\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    onPageChanged: (page: number) => void\r\n    totalUserCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    followingInProgress: Array<number>\r\n}\r\n\r\n\r\nfunction Users(\r\n    {\r\n        users,\r\n        follow,\r\n        unFollow,\r\n        onPageChanged,\r\n        totalUserCount,\r\n        pageSize,\r\n        currentPage,\r\n        followingInProgress\r\n    }: UserPageType) {\r\n\r\n    return (\r\n\r\n        <div>\r\n            <Paginator currentPage={currentPage}\r\n                       totalItemsCount={totalUserCount}\r\n                       pageSize={pageSize}\r\n                       onPageChanged={onPageChanged}\r\n                        portionSize={10}\r\n            />\r\n            <div>\r\n                {users.map(u => <User user={u} key={u.id}\r\n                                      follow={follow}\r\n                                      unFollow={unFollow}\r\n                                      followingInProgress={followingInProgress}/>)}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Users;","import {AppStateType} from \"./redux-store\";\r\n\r\n\r\nexport const getUser = (state:AppStateType)=>{\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getPageSize  = (state:AppStateType)=>{\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUserCount  = (state:AppStateType)=>{\r\n    return state.usersPage.totalUserCount\r\n}\r\n\r\nexport const getCurrentPage  = (state:AppStateType)=>{\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching  = (state:AppStateType)=>{\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress  = (state:AppStateType)=>{\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {follow, getUsers, setCurrentPage, unFollow, UsersType} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUserCount,\r\n    getUser\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUserCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\ntype UserPageType = MapDispatchPropsType & MapStatePropsType\r\n\r\nclass UsersContainer extends React.Component<UserPageType> {\r\n\r\n    componentDidMount() {\r\n        const {currentPage, pageSize}=this.props;\r\n        this.props.getUsers(currentPage,pageSize)\r\n    }\r\n\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize}=this.props\r\n        this.props.getUsers(pageNumber, pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                onPageChanged={this.onPageChanged}\r\n                totalUserCount={this.props.totalUserCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unFollow={this.props.unFollow}\r\n                followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUser(state),\r\n        pageSize: getPageSize(state),\r\n        totalUserCount: getTotalUserCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unFollow,\r\n        setCurrentPage,\r\n        getUsers\r\n    })\r\n)(UsersContainer)\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Header.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\ntype HeaderPropsType={\r\n    isAuth:boolean\r\n    login:string\r\n    logout:()=>void\r\n}\r\n\r\n\r\nconst Header = (props:HeaderPropsType) =>{\r\n    return(\r\n        <header className={s.header}>\r\n            <img src='https://cryptologos.cc/logos/aeternity-ae-logo.png'\r\n                alt={'logo'}\r\n            />\r\n       <div className={s.loginBlock}>\r\n           {props.isAuth\r\n               ? <div>{props.login} - <button onClick={props.logout}>Log out</button> </div>\r\n                :<NavLink to='/login'>\r\n                LOGIN\r\n            </NavLink>}\r\n       </div>\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype HeaderContainerProps=MapDispatchPropsType & MapStateToPropsType\r\n\r\ntype MapStateToPropsType ={\r\n    isAuth: boolean\r\n    login:string\r\n\r\n}\r\ntype MapDispatchPropsType={\r\n    logout:()=>void\r\n}\r\n\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerProps> {\r\n    render() {\r\n\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst MapStateToProps=(state: AppStateType):MapStateToPropsType=>{\r\n    return{\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default  connect(MapStateToProps,{logout})(HeaderContainer);","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/TextArea\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport s from \"../common/FormsControls/TextArea.module.css\"\r\n\r\n\r\nconst LoginForm = ({handleSubmit, error}: any) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'Email'} name={'email'} component={Input}\r\n                       validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'Password'} name={'password'} type={'password'} component={Input}\r\n                       validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field type={'checkbox'} name={'rememberMe'} component={Input}/>\r\n                remember me\r\n            </div>\r\n            {/*{captchaUrl && <img src{captchaUrl}/>}\r\n            {captchaUrl && <Field placeholder={'Symbols from image'} name={'captcha'} type={''} component={Input}\r\n                validate={[required]}/>}*/}\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n\r\n\r\ntype LoginPropsType={\r\n    isAuth:boolean\r\n    login:any\r\n}\r\n\r\n\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n\r\n    const onSubmit = (formData: any) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}  />\r\n    </div>\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Music from \"./components/Music/Music\";\r\nimport News from \"./components/News/News\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\n\r\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"))\r\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"))\r\n\r\n\r\ntype AppProps = MapDispatchPropsType & MapStateToPropsType\r\n\r\ntype MapDispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\ntype MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\n\r\n\r\nclass App extends React.Component<AppProps> {\r\n    catchAllUnhandledErrors =()=>{\r\n        alert(\"Some error occurred\")\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n        window.addEventListener('unhandledrejection',this.catchAllUnhandledErrors)\r\n    }\r\n    componentWillUnmount(){\r\n        window.removeEventListener('unhandledrejection',this.catchAllUnhandledErrors)\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.props.initialized)\r\n            return <Preloader/>\r\n\r\n        return (\r\n            <div className=\"app-wrapper\">\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Switch>\r\n                        <Route exact path='/'\r\n                               render={() => <Redirect to={'/profile'}/>}/>\r\n                        <Route path=\"/dialogs\"\r\n                               render={() => {\r\n                                   return <React.Suspense fallback={<Preloader/>}>\r\n                                       <DialogsContainer/>\r\n                                    </React.Suspense>\r\n                               }}/>\r\n                        <Route path=\"/profile/:userId?\" render={() => {\r\n                            return <React.Suspense fallback={<Preloader/>}>\r\n                                <ProfileContainer/>\r\n                            </React.Suspense>\r\n                        }}/>\r\n                        <Route path=\"/music\" render={() => <Music/>}/>\r\n                        <Route path=\"/news\" render={() => <News/>}/>\r\n                        <Route path=\"/settings\" render={() => <Settings/>}/>\r\n                        <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n                        <Route path=\"/login\" render={() => <Login/>}/>\r\n                        <Route path=\"/*\" render={() => <div> 404 NOT FOUND</div>}/>\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\n\r\nexport default connect(MapStateToProps, {initializeApp})(App);\r\n\r\n\r\n","import store from \"./redux/redux-store\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>\r\n    , document.getElementById('root'))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperContainer\":\"NewsCard_wrapperContainer__3Vlni\",\"image\":\"NewsCard_image__1eupA\",\"container\":\"NewsCard_container__2QNX1\",\"subtitle\":\"NewsCard_subtitle__3Jlma\",\"title\":\"NewsCard_title__2aEmM\",\"description\":\"NewsCard_description__2RjdA\"};","import React from \"react\";\r\nimport preloader from \"../../../assets/image/preloader.gif\";\r\n\r\n\r\n\r\nconst Preloader = ()=>{\r\n    return(\r\n        <div>\r\n            <img src={preloader}\r\n            alt={\"preloader\"}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"TextArea_formControl__qsM9L\",\"error\":\"TextArea_error__3jrad\",\"formSummaryError\":\"TextArea_formSummaryError__3JgpO\"};","import React from 'react';\r\nimport s from './TextArea.module.css'\r\n\r\n\r\nconst FormControl = ({input,meta,child, ...props}:any)=>{\r\n    const hasError = meta.touched &&  meta.error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' +(hasError ?s.error : '') }>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport const TextArea = (props:any) => {\r\n    const {input,meta,child, ...restProps} = props\r\n    return <FormControl {...props}> <textarea {...input} {...restProps}/></FormControl>\r\n};\r\n\r\n\r\nexport const Input = (props:any) => {\r\n    const {input,meta,child, ...restProps} = props\r\n    return <FormControl {...props}> <input {...input} {...restProps}/></FormControl>\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__2Gd5r\"};","\r\n\r\nexport const required = (value:string) =>{\r\n    if(value) return undefined\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator= (maxLength:number) => (value:string) =>{\r\n    if(value && value.length > maxLength) return `Max length ${maxLength} symbols `\r\n    return undefined\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3sFD7\",\"loginBlock\":\"Header_loginBlock__3r8H4\"};","import {AppStateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {profileApi} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\ntype ActionsTypes =\r\n    ReturnType<typeof addPost>\r\n    | ReturnType<typeof updateNewPost>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n    | ReturnType<typeof savePhotoSuccess>\r\n\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    profile: any\r\n    status: string\r\n}\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    photos: PhotoType\r\n    userId: number\r\n}\r\n\r\ntype ContactsType = {\r\n    facebook: string\r\n    github: string\r\n    instagram: string\r\n}\r\ntype PhotoType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\n\r\nlet initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: 0, message: 'Hi, how are you?', likesCount: 15},\r\n        {id: 1, message: \"It's my first post\", likesCount: 17}\r\n    ],\r\n    newPostText: \"cdscdscsdc\",\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ActionsTypes): ProfilePageType => {\r\n\r\n    switch (action.type) {\r\n        case 'ADD-POST':\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {id: 3, message: action.postMessage, likesCount: 0}]\r\n            }\r\n        case 'UPDATE-NEW-POST':\r\n            return {\r\n                ...state,\r\n                newPostText: action.newPostText\r\n            }\r\n        case 'SET-USER-PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case \"SET-STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case \"SET-PHOTO\":\r\n            return {...state, profile: {...state.profile, photos: action.photos}}\r\n        default:\r\n            return state\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const addPost = (postMessage: string) => {\r\n    return {\r\n        type: 'ADD-POST',\r\n        postMessage\r\n    } as const\r\n}\r\n\r\nexport const updateNewPost = (newPostText: string) => {\r\n    return {\r\n        type: 'UPDATE-NEW-POST',\r\n        newPostText\r\n    } as const\r\n}\r\n\r\nexport const setUserProfile = (profile: any) => {\r\n    return {\r\n        type: 'SET-USER-PROFILE',\r\n        profile\r\n    } as const\r\n}\r\n\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: 'SET-STATUS',\r\n        status\r\n    } as const\r\n}\r\n\r\nexport const savePhotoSuccess = (photos: string) => {\r\n    return {\r\n        type: 'SET-PHOTO',\r\n        photos\r\n    } as const\r\n}\r\n\r\n\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsTypes>\r\n\r\nexport const getUserProfile = (userId: number) => {\r\n    return (dispatch: DispatchType, getStateType: GetStateType) => {\r\n        profileApi.getProfile(userId).then(data => {\r\n            dispatch(setUserProfile(data))\r\n        })\r\n    }\r\n}\r\n\r\nexport const getStatus = (userId: number) => {\r\n    return (dispatch: DispatchType, getStateType: GetStateType) => {\r\n        profileApi.getStatus(userId).then(data => {\r\n            dispatch(setStatus(data))\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateStatus = (status: string) => {\r\n    return (dispatch: DispatchType, getStateType: GetStateType) => {\r\n        profileApi.updateStatus(status).then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(setStatus(status))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: any) => {\r\n    return (dispatch: DispatchType, getStateType: GetStateType) => {\r\n        profileApi.savePhoto(file).then((data) => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(savePhotoSuccess(data.data.photos))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: any) => {\r\n    return (dispatch: DispatchType, getStateType: GetStateType) => {\r\n        const userId= getStateType().auth.userId\r\n        profileApi.saveProfile(profile).then((data) => {\r\n            if (data.resultCode === 0) {\r\n                // @ts-ignore\r\n                dispatch(getUserProfile(userId))\r\n            }else{\r\n               /* let message = data.data.messages[0]\r\n                dispatch(stopSubmit('edit-profile',{_error:message}))*/\r\n            }\r\n\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\ntype mapStatePropsType={\r\n    isAuth:boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth)\r\n            return <Redirect to={'/login'} />\r\n\r\n        return <Component  {...restProps as T}/>\r\n\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}"],"sourceRoot":""}